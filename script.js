// ‰ªélocalStorageÂä†ËΩΩÊï∞ÊçÆ
let careerData = JSON.parse(localStorage.getItem('careerData')) || {
    gonna: [],
    tried: [],
    yn: { yes: [], no: [], maybe: [] },
    people: [],
    environment: [] // ÊØè‰∏™ËÆ∞ÂΩïÈ°πÁé∞Âú®Â∞ÜÊòØ‰∏Ä‰∏™ÂåÖÂê´ÂõæÁâáÊï∞ÁªÑÁöÑÂØπË±°
};

// ÊâìÂºÄÈ°µÈù¢
function openPage(type) {
    const pageContent = document.getElementById('page-content');
    const content = document.getElementById('content');
    const pageTitle = document.getElementById('page-title');
    const container = document.querySelector('.container');
    
    // Â¶ÇÊûúÊòØ‰ªéÈ¶ñÈ°µËøõÂÖ•ÔºåÊòæÁ§∫È°µÈù¢ÂÜÖÂÆπÂπ∂ÈöêËóèÈ¶ñÈ°µ
    if (container.style.display !== 'none') {
        pageContent.style.display = 'block';
        container.style.display = 'none';
    }
    
    // ËÆæÁΩÆÈ°µÈù¢Ê†áÈ¢ò
    pageTitle.textContent = type.charAt(0).toUpperCase() + type.slice(1);
    
    // Ê†πÊçÆÁ±ªÂûãÊòæÁ§∫‰∏çÂêåÁöÑÂÜÖÂÆπ
    switch(type) {
        case 'gonna':
            content.innerHTML = getGonnaContent();
            break;
        case 'tried':
            content.innerHTML = getTriedContent();
            break;
        case 'yn':
            content.innerHTML = getYNContent();
            break;
        case 'people':
            content.innerHTML = getPeopleContent();
            break;
        case 'environment':
            content.innerHTML = getEnvironmentContent();
            break;
    }

    // Ê∑ªÂä†ËøôË°åÊù•ÂàùÂßãÂåñÊãñÊãΩ
    setTimeout(() => {
        const sortableList = document.querySelector('.sortable-list');
        if (sortableList) {
            initSortable(sortableList);
        }
    }, 0);
}

// ËøîÂõû‰∏ªÈ°µ
function goBack() {
    const pageContent = document.getElementById('page-content');
    const container = document.querySelector('.container');
    
    pageContent.style.display = 'none';
    container.style.display = 'block';
}

// GonnaÈ°µÈù¢ÂÜÖÂÆπ
function getGonnaContent() {
    return `
        <div id="gonna-list" class="sortable-list">
            ${careerData.gonna.map((item, index) => `
                <div class="record-card" draggable="true" data-index="${index}">
                    <div class="content">
                        ${item}
                    </div>
                    <div class="actions">
                        <button class="edit-btn" onclick="showEditForm('gonna', ${index})">‚úé</button>
                        <button class="delete-btn" onclick="deleteRecord('gonna', ${index})">√ó</button>
                    </div>
                </div>
            `).join('')}
        </div>
        <button class="add-button" onclick="showAddForm('gonna')">+</button>
    `;
}

// TriedÈ°µÈù¢ÂÜÖÂÆπ
function getTriedContent() {
    return `
        <div id="tried-list" class="sortable-list">
            ${careerData.tried.map((job, index) => `
                <div class="record-card" draggable="true" data-index="${index}">
                    <div class="content">
                        <h3>${job.name}</h3>
                        <div class="likes-dislikes">
                            <div>
                                <span class="emoji">‚ù§Ô∏è</span>
                                <span class="text-content">${job.likes}</span>
                            </div>
                            <div>
                                <span class="emoji">üíî</span>
                                <span class="text-content">${job.dislikes}</span>
                            </div>
                        </div>
                    </div>
                    <div class="actions">
                        <button class="edit-btn" onclick="showEditForm('tried', ${index})">‚úé</button>
                        <button class="delete-btn" onclick="deleteRecord('tried', ${index})">√ó</button>
                    </div>
                </div>
            `).join('')}
        </div>
        <button class="add-button" onclick="showAddForm('tried')">+</button>
    `;
}

// Y/NÈ°µÈù¢ÂÜÖÂÆπ
function getYNContent() {
    return `
        <div class="yn-container">
            <div class="yn-card" onclick="showYNList('yes')">‚úÖ</div>
            <div class="yn-card" onclick="showYNList('no')">‚ùå</div>
            <div class="yn-card" onclick="showYNList('maybe')">‚ùì</div>
        </div>
        <div id="yn-list"></div>
    `;
}

// PeopleÈ°µÈù¢ÂÜÖÂÆπ
function getPeopleContent() {
    return `
        <div id="people-list" class="sortable-list">
            ${careerData.people.map((item, index) => `
                <div class="record-card" draggable="true" data-index="${index}">
                    <div class="content">
                        ${item}
                    </div>
                    <div class="actions">
                        <button class="edit-btn" onclick="showEditForm('people', ${index})">‚úé</button>
                        <button class="delete-btn" onclick="deleteRecord('people', ${index})">√ó</button>
                    </div>
                </div>
            `).join('')}
        </div>
        <button class="add-button" onclick="showAddForm('people')">+</button>
    `;
}

// EnvironmentÈ°µÈù¢ÂÜÖÂÆπ
function getEnvironmentContent() {
    return `
        <div id="environment-list" class="sortable-list">
            ${careerData.environment.map((item, index) => `
                <div class="record-card" draggable="true" data-index="${index}">
                    <div class="content">
                        <div class="image-grid">
                            ${(item.images || []).map((img, imgIndex) => `
                                <div class="image-item" onclick="showImageViewer('${img}')">
                                    <img src="${img}" alt="ÁéØÂ¢ÉÂõæÁâá">
                                    <button class="delete-image-btn" onclick="deleteImage(${index}, ${imgIndex}); event.stopPropagation();">√ó</button>
                                </div>
                            `).join('')}
                            ${(!item.images || item.images.length < 5) ? `
                                <label class="image-upload-label" onclick="addImageToCard(${index})">
                                    <span>+</span>
                                </label>
                            ` : ''}
                        </div>
                    </div>
                    <div class="actions">
                        <button class="delete-btn" onclick="deleteRecord('environment', ${index})">√ó</button>
                    </div>
                </div>
            `).join('')}
        </div>
        <button class="add-button" onclick="showEnvironmentUpload()">+</button>
    `;
}

// ÊòæÁ§∫Ê∑ªÂä†Ë°®Âçï
function showAddForm(type) {
    const content = document.getElementById('content');
    
    switch(type) {
        case 'gonna':
            content.innerHTML = `
                <div class="form-group">
                    <input type="text" id="gonna-input">
                </div>
            `;
            const gonnaInput = document.getElementById('gonna-input');
            gonnaInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && gonnaInput.value.trim()) {
                    addGonna();
                }
            });
            gonnaInput.focus();
            break;
        case 'tried':
            content.innerHTML = `
                <div class="form-group">
                    <input type="text" id="job-name" placeholder="Â∑•‰Ωú/È°πÁõÆÂêçÁß∞">
                    <textarea id="likes" placeholder="ÂñúÊ¨¢ÁöÑÊñπÈù¢ÔºàÊØèË°å‰∏ÄÊù°Ôºâ"></textarea>
                    <textarea id="dislikes" placeholder="‰∏çÂñúÊ¨¢ÁöÑÊñπÈù¢ÔºàÊØèË°å‰∏ÄÊù°Ôºâ"></textarea>
                    <div class="form-buttons">
                        <button onclick="openPage('tried')" class="cancel-btn">ÂèñÊ∂à</button>
                        <button onclick="addTried()" class="save-btn">‰øùÂ≠ò</button>
                    </div>
                </div>
            `;
            const jobName = document.getElementById('job-name');
            const likes = document.getElementById('likes');
            const dislikes = document.getElementById('dislikes');
            
            jobName.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && jobName.value.trim()) {
                    likes.focus();
                }
            });
            likes.addEventListener('keydown', (e) => {
                if (e.key === 'Tab' && !e.shiftKey) {
                    e.preventDefault();
                    dislikes.focus();
                }
            });
            jobName.focus();
            break;
        case 'people':
            content.innerHTML = `
                <div class="form-group">
                    <input type="text" id="people-input">
                </div>
            `;
            const peopleInput = document.getElementById('people-input');
            peopleInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && peopleInput.value.trim()) {
                    addPeople();
                }
            });
            peopleInput.focus();
            break;
        case 'environment':
            content.innerHTML = `
                <div class="form-group">
                    <input type="text" id="environment-input">
                </div>
            `;
            const envInput = document.getElementById('environment-input');
            envInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && envInput.value.trim()) {
                    addEnvironment();
                }
            });
            envInput.focus();
            break;
    }
}

// ÊòæÁ§∫Y/NÂàóË°®
function showYNList(type) {
    currentYNType = type;
    const ynList = document.getElementById('yn-list');
    ynList.innerHTML = `
        <div class="sortable-list">
            ${careerData.yn[type].map((item, index) => `
                <div class="record-card" draggable="true" data-index="${index}">
                    <div class="content">
                        ${item}
                    </div>
                    <div class="actions">
                        <button class="edit-btn" onclick="showEditForm('yn_${type}', ${index})">‚úé</button>
                        <button class="delete-btn" onclick="deleteRecord('yn', ${index})">√ó</button>
                    </div>
                </div>
            `).join('')}
        </div>
        <div class="form-group">
            <input type="text" id="yn-input">
        </div>
    `;
    const ynInput = document.getElementById('yn-input');
    ynInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && ynInput.value.trim()) {
            addYN(type);
        }
    });
    initSortable(ynList.querySelector('.sortable-list'));
}

// Ê∑ªÂä†GonnaËÆ∞ÂΩï
function addGonna() {
    const input = document.getElementById('gonna-input');
    if (input.value.trim()) {
        careerData.gonna.push(input.value.trim());
        saveData();
        openPage('gonna');
    }
}

// Ê∑ªÂä†TriedËÆ∞ÂΩï
function addTried() {
    const name = document.getElementById('job-name').value.trim();
    const likes = document.getElementById('likes').value.trim();
    const dislikes = document.getElementById('dislikes').value.trim();
    
    if (name) {
        careerData.tried.push({ name, likes, dislikes });
        saveData();
        openPage('tried');
    }
}

// Ê∑ªÂä†Y/NËÆ∞ÂΩï
function addYN(type) {
    const input = document.getElementById('yn-input');
    if (input.value.trim()) {
        careerData.yn[type].push(input.value.trim());
        saveData();
        showYNList(type);
    }
}

// Ê∑ªÂä†PeopleËÆ∞ÂΩï
function addPeople() {
    const input = document.getElementById('people-input');
    if (input.value.trim()) {
        careerData.people.push(input.value.trim());
        saveData();
        openPage('people');
    }
}

// Ê∑ªÂä†EnvironmentËÆ∞ÂΩï
function addEnvironment() {
    const input = document.getElementById('environment-input');
    if (input.value.trim()) {
        careerData.environment.push(input.value.trim());
        saveData();
        openPage('environment');
    }
}

// ‰øùÂ≠òÊï∞ÊçÆÂà∞localStorage
function saveData() {
    localStorage.setItem('careerData', JSON.stringify(careerData));
}

// Âà†Èô§ËÆ∞ÂΩï
function deleteRecord(type, index) {
    if (type === 'yn') {
        const ynType = currentYNType;
        careerData.yn[ynType].splice(index, 1);
        showYNList(ynType);
    } else {
        careerData[type].splice(index, 1);
        openPage(type);
    }
    saveData();
}

// Y/NÈ°µÈù¢ÂÜÖÂÆπÂíåÂàóË°®ÊòæÁ§∫‰πüÈúÄË¶ÅÊõ¥Êñ∞
let currentYNType = null;

// ÂàùÂßãÂåñÊãñÊãΩÂäüËÉΩ
function initSortable(container) {
    if (!container) return;

    let draggedItem = null;
    let touchStartY = 0;
    let initialY = 0;
    let currentY = 0;

    const items = container.querySelectorAll('.record-card');
    items.forEach(item => {
        // ÁßªÈô§Âç°ÁâáÁöÑdraggableÂ±ûÊÄß
        item.removeAttribute('draggable');
        
        // Ê∑ªÂä†ÊãñÂä®ÊâãÊüÑ
        const dragHandle = document.createElement('div');
        dragHandle.className = 'drag-handle';
        dragHandle.innerHTML = '‚ãÆ‚ãÆ';
        dragHandle.setAttribute('draggable', 'true');
        item.insertBefore(dragHandle, item.firstChild);

        // PCÁ´ØÊãñÊãΩ - Âè™Âú®ÊãñÂä®ÊâãÊüÑÊó∂Ëß¶Âèë
        dragHandle.addEventListener('dragstart', (e) => {
            draggedItem = item;
            item.classList.add('dragging');
            // ËÆæÁΩÆÊãñÂä®Êó∂ÁöÑÈÄèÊòéÂ∫¶
            setTimeout(() => {
                item.style.opacity = '0.5';
            }, 0);
        });

        dragHandle.addEventListener('dragend', () => {
            if (draggedItem) {
                draggedItem.classList.remove('dragging');
                draggedItem.style.opacity = '';
                updateOrder(container);
                draggedItem = null;
            }
        });

        // ÁßªÂä®Á´ØËß¶Êë∏ - Âè™Âú®ÊãñÂä®ÊâãÊüÑÊó∂Ëß¶Âèë
        dragHandle.addEventListener('touchstart', (e) => {
            draggedItem = item;
            touchStartY = e.touches[0].clientY;
            initialY = item.offsetTop;
            
            item.classList.add('dragging');
            item.style.position = 'relative';
            item.style.zIndex = '1000';
            
            // ËÆ∞ÂΩïÂÖ∂‰ªñÈ°πÁöÑÂàùÂßã‰ΩçÁΩÆ
            items.forEach(otherItem => {
                if (otherItem !== item) {
                    otherItem.initialTop = otherItem.offsetTop;
                }
            });
        }, { passive: false });

        dragHandle.addEventListener('touchmove', (e) => {
            if (!draggedItem) return;
            e.preventDefault();

            currentY = e.touches[0].clientY - touchStartY;
            draggedItem.style.transform = `translateY(${currentY}px)`;

            // ËÆ°ÁÆóÂΩìÂâç‰ΩçÁΩÆ
            const draggedRect = draggedItem.getBoundingClientRect();
            const draggedCenter = draggedRect.top + draggedRect.height / 2;

            // ÁßªÂä®ÂÖ∂‰ªñÈ°π
            items.forEach(otherItem => {
                if (otherItem !== draggedItem) {
                    const otherRect = otherItem.getBoundingClientRect();
                    const otherCenter = otherRect.top + otherRect.height / 2;

                    if (draggedCenter < otherCenter && 
                        draggedItem.initialTop > otherItem.initialTop) {
                        otherItem.style.transform = 'translateY(100%)';
                    } else if (draggedCenter > otherCenter && 
                        draggedItem.initialTop < otherItem.initialTop) {
                        otherItem.style.transform = 'translateY(-100%)';
                    } else {
                        otherItem.style.transform = '';
                    }
                }
            });
        }, { passive: false });

        dragHandle.addEventListener('touchend', () => {
            if (!draggedItem) return;
            
            draggedItem.classList.remove('dragging');
            draggedItem.style.transform = '';
            draggedItem.style.position = '';
            draggedItem.style.zIndex = '';

            // ÈáçÁΩÆÂÖ∂‰ªñÈ°πÁöÑ‰ΩçÁΩÆ
            items.forEach(otherItem => {
                otherItem.style.transform = '';
            });

            updateOrder(container);
            draggedItem = null;
        });
    });

    container.addEventListener('dragover', e => {
        e.preventDefault();
        const draggingItem = container.querySelector('.dragging');
        if (!draggingItem) return;
        
        const siblings = [...container.querySelectorAll('.record-card:not(.dragging)')];
        const nextSibling = siblings.find(sibling => {
            const box = sibling.getBoundingClientRect();
            return e.clientY <= box.top + box.height / 2;
        });

        container.insertBefore(draggingItem, nextSibling);
    });
}

// Êõ¥Êñ∞ÊéíÂ∫èÂêéÁöÑÊï∞ÊçÆ
function updateOrder(container) {
    const type = container.id.replace('-list', '');
    const items = container.querySelectorAll('.record-card');
    const newOrder = [];
    
    items.forEach(item => {
        const index = parseInt(item.dataset.index);
        if (type === 'yn') {
            newOrder.push(careerData.yn[currentYNType][index]);
        } else {
            newOrder.push(careerData[type][index]);
        }
    });

    if (type === 'yn') {
        careerData.yn[currentYNType] = newOrder;
    } else {
        careerData[type] = newOrder;
    }
    saveData();
}

// ÂØºÂá∫Êï∞ÊçÆ
function exportData() {
    const dataStr = JSON.stringify(careerData, null, 2);
    
    // ÂàõÂª∫Ê®°ÊÄÅÊ°ÜÊòæÁ§∫Êï∞ÊçÆ
    const content = document.createElement('div');
    content.innerHTML = `
        <div class="export-modal">
            <div class="export-modal-content">
                <h3>ÂØºÂá∫Êï∞ÊçÆ</h3>
                <p>ËØ∑Â§çÂà∂‰ª•‰∏ãÂÜÖÂÆπÂπ∂‰øùÂ≠ò‰∏∫ .json Êñá‰ª∂Ôºö</p>
                <textarea class="export-text" readonly>${dataStr}</textarea>
                <div class="export-actions">
                    <button onclick="copyExportData()">Â§çÂà∂</button>
                    <button onclick="closeExportModal()">ÂÖ≥Èó≠</button>
                </div>
            </div>
        </div>
    `;
    document.body.appendChild(content);

    // Ëá™Âä®ÈÄâ‰∏≠ÊñáÊú¨
    const textarea = content.querySelector('.export-text');
    textarea.select();
}

// Â§çÂà∂ÂØºÂá∫Êï∞ÊçÆ
function copyExportData() {
    const textarea = document.querySelector('.export-text');
    textarea.select();
    document.execCommand('copy');
    alert('Â∑≤Â§çÂà∂Âà∞Ââ™Ë¥¥Êùø');
}

// ÂÖ≥Èó≠ÂØºÂá∫Ê®°ÊÄÅÊ°Ü
function closeExportModal() {
    const modal = document.querySelector('.export-modal');
    if (modal) {
        modal.parentElement.remove();
    }
}

// ÂØºÂÖ•Êï∞ÊçÆ
function importData(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const importedData = JSON.parse(e.target.result);
            
            // È™åËØÅÊï∞ÊçÆÁªìÊûÑ
            if (validateData(importedData)) {
                careerData = importedData;
                saveData();
                // Â¶ÇÊûúÂΩìÂâçÂú®Êüê‰∏™È°µÈù¢ÔºåÂà∑Êñ∞ÊòæÁ§∫
                const pageContent = document.getElementById('page-content');
                if (pageContent.style.display === 'block') {
                    const currentPage = document.getElementById('page-title').textContent.toLowerCase();
                    openPage(currentPage);
                }
                alert('Êï∞ÊçÆÂØºÂÖ•ÊàêÂäüÔºÅ');
            } else {
                alert('Êï∞ÊçÆÊ†ºÂºè‰∏çÊ≠£Á°ÆÔºåËØ∑Á°Æ‰øùÂØºÂÖ•Ê≠£Á°ÆÁöÑÂ§á‰ªΩÊñá‰ª∂„ÄÇ');
            }
        } catch (error) {
            alert('ÂØºÂÖ•Â§±Ë¥•ÔºöÊñá‰ª∂Ê†ºÂºèÈîôËØØ');
        }
    };
    reader.readAsText(file);
    event.target.value = ''; // Ê∏ÖÈô§Êñá‰ª∂ÈÄâÊã©ÔºåÂÖÅËÆ∏ÈáçÂ§çÂØºÂÖ•Âêå‰∏ÄÊñá‰ª∂
}

// È™åËØÅÂØºÂÖ•ÁöÑÊï∞ÊçÆÁªìÊûÑ
function validateData(data) {
    const requiredKeys = ['gonna', 'tried', 'yn', 'people', 'environment'];
    const requiredYNKeys = ['yes', 'no', 'maybe'];
    
    // Ê£ÄÊü•È°∂Á∫ßÈîÆÊòØÂê¶Â≠òÂú®
    const hasAllKeys = requiredKeys.every(key => key in data);
    if (!hasAllKeys) return false;
    
    // Ê£ÄÊü•Êï∞ÁªÑÁ±ªÂûã
    if (!Array.isArray(data.gonna) || 
        !Array.isArray(data.tried) || 
        !Array.isArray(data.people) || 
        !Array.isArray(data.environment)) {
        return false;
    }
    
    // Ê£ÄÊü• Y/N ÁªìÊûÑ
    if (typeof data.yn !== 'object') return false;
    const hasAllYNKeys = requiredYNKeys.every(key => key in data.yn);
    if (!hasAllYNKeys) return false;
    
    // Ê£ÄÊü• Y/N ÁöÑÂ≠êÊï∞ÁªÑ
    if (!Array.isArray(data.yn.yes) || 
        !Array.isArray(data.yn.no) || 
        !Array.isArray(data.yn.maybe)) {
        return false;
    }
    
    return true;
}

// ÊòæÁ§∫ÁºñËæëË°®Âçï
function showEditForm(type, index) {
    let record;
    let recordElement;
    
    if (type.startsWith('yn_')) {
        const ynType = type.split('_')[1];
        record = careerData.yn[ynType][index];
        recordElement = document.querySelector(`[data-index="${index}"]`);
        type = 'yn';
    } else {
        record = careerData[type][index];
        recordElement = document.querySelector(`[data-index="${index}"]`);
    }
    
    if (type === 'tried') {
        const formHTML = `
            <div class="edit-form">
                <input type="text" id="edit-name" value="${record.name}" placeholder="Â∑•‰ΩúÂêçÁß∞">
                <textarea id="edit-likes" placeholder="ÂñúÊ¨¢ÁöÑÊñπÈù¢">${record.likes}</textarea>
                <textarea id="edit-dislikes" placeholder="‰∏çÂñúÊ¨¢ÁöÑÊñπÈù¢">${record.dislikes}</textarea>
                <div class="edit-form-buttons">
                    <button onclick="cancelEdit('${type}', ${index})">ÂèñÊ∂à</button>
                    <button onclick="saveEdit('${type}', ${index})">‰øùÂ≠ò</button>
                </div>
            </div>
        `;
        recordElement.innerHTML = formHTML;
    } else {
        const formHTML = `
            <div class="edit-form">
                <input type="text" id="edit-content" value="${record}" placeholder="ÂÜÖÂÆπ">
                <div class="edit-form-buttons">
                    <button onclick="cancelEdit('${type}', ${index})">ÂèñÊ∂à</button>
                    <button onclick="saveEdit('${type}', ${index})">‰øùÂ≠ò</button>
                </div>
            </div>
        `;
        recordElement.innerHTML = formHTML;
    }
}

// ‰øùÂ≠òÁºñËæë
function saveEdit(type, index) {
    if (type === 'tried') {
        const name = document.getElementById('edit-name').value.trim();
        const likes = document.getElementById('edit-likes').value.trim();
        const dislikes = document.getElementById('edit-dislikes').value.trim();
        
        if (name) {
            careerData[type][index] = { name, likes, dislikes };
            saveData();
            openPage(type);
        }
    } else if (type === 'yn') {
        const content = document.getElementById('edit-content').value.trim();
        if (content) {
            careerData.yn[currentYNType][index] = content;
            saveData();
            showYNList(currentYNType);
        }
    } else {
        const content = document.getElementById('edit-content').value.trim();
        if (content) {
            careerData[type][index] = content;
            saveData();
            openPage(type);
        }
    }
}

// ÂèñÊ∂àÁºñËæë
function cancelEdit(type, index) {
    openPage(type);
}

// Âà†Èô§ÂçïÂº†ÂõæÁâá
function deleteImage(cardIndex, imageIndex) {
    careerData.environment[cardIndex].images.splice(imageIndex, 1);
    if (careerData.environment[cardIndex].images.length === 0) {
        careerData.environment.splice(cardIndex, 1);
    }
    saveData();
    openPage('environment');
}

// ÊòæÁ§∫ÁéØÂ¢ÉÂõæÁâá‰∏ä‰º†ÁïåÈù¢
function showEnvironmentUpload() {
    const content = document.getElementById('content');
    content.innerHTML = `
        <div class="upload-container">
            <div class="image-preview-grid"></div>
            <label class="image-upload-button">
                <input type="file" accept="image/*" multiple onchange="handleImageUpload(event)" style="display: none;">
                ÈÄâÊã©ÂõæÁâáÔºàÊúÄÂ§ö5Âº†Ôºâ
            </label>
            <div class="upload-actions">
                <button onclick="openPage('environment')">ÂèñÊ∂à</button>
                <button onclick="saveEnvironmentImages()" class="primary">‰øùÂ≠ò</button>
            </div>
        </div>
    `;
}

// Â§ÑÁêÜÂõæÁâá‰∏ä‰º†
let tempImages = [];
function handleImageUpload(event) {
    const files = event.target.files;
    const previewGrid = document.querySelector('.image-preview-grid');
    
    if (tempImages.length + files.length > 5) {
        alert('ÊúÄÂ§öÂè™ËÉΩ‰∏ä‰º†5Âº†ÂõæÁâá');
        return;
    }
    
    Array.from(files).forEach(file => {
        if (tempImages.length >= 5) return;
        
        const reader = new FileReader();
        reader.onload = function(e) {
            tempImages.push(e.target.result);
            updatePreviewGrid();
        };
        reader.readAsDataURL(file);
    });
}

// Êõ¥Êñ∞È¢ÑËßàÁΩëÊ†º
function updatePreviewGrid() {
    const previewGrid = document.querySelector('.image-preview-grid');
    previewGrid.innerHTML = tempImages.map((img, index) => `
        <div class="image-preview">
            <img src="${img}" alt="È¢ÑËßàÂõæÁâá">
            <button onclick="removePreviewImage(${index})">√ó</button>
        </div>
    `).join('');
}

// ÁßªÈô§È¢ÑËßàÂõæÁâá
function removePreviewImage(index) {
    tempImages.splice(index, 1);
    updatePreviewGrid();
}

// ‰øùÂ≠òÁéØÂ¢ÉÂõæÁâá
function saveEnvironmentImages() {
    if (tempImages.length > 0) {
        careerData.environment.push({
            images: [...tempImages]
        });
        saveData();
        tempImages = [];
        openPage('environment');
    }
}

// ÂêëÂ∑≤ÊúâÂç°ÁâáÊ∑ªÂä†ÂõæÁâá
function addImageToCard(cardIndex) {
    const input = document.createElement('input');
    input.type = 'file';
    input.accept = 'image/*';
    input.multiple = true;
    input.onchange = function(event) {
        const files = event.target.files;
        const currentImages = careerData.environment[cardIndex].images || [];
        
        if (currentImages.length + files.length > 5) {
            alert('ÊØè‰∏™ËÆ∞ÂΩïÊúÄÂ§öÂè™ËÉΩÂåÖÂê´5Âº†ÂõæÁâá');
            return;
        }
        
        let processedFiles = 0;
        Array.from(files).forEach(file => {
            if (currentImages.length >= 5) return;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                currentImages.push(e.target.result);
                processedFiles++;
                
                if (processedFiles === files.length) {
                    careerData.environment[cardIndex].images = currentImages;
                    saveData();
                    openPage('environment');
                }
            };
            reader.readAsDataURL(file);
        });
    };
    input.click();
}

// ÊòæÁ§∫ÂõæÁâáÊü•ÁúãÂô®
function showImageViewer(imageSrc) {
    // ÂàõÂª∫Ê®°ÊÄÅÊ°Ü
    const modal = document.createElement('div');
    modal.className = 'image-viewer-modal';
    modal.innerHTML = `
        <div class="image-viewer-content">
            <button class="image-viewer-close" onclick="closeImageViewer(this)">√ó</button>
            <img src="${imageSrc}" alt="Êü•ÁúãÂõæÁâá">
        </div>
    `;
    
    // Ê∑ªÂä†ÁÇπÂáªËÉåÊôØÂÖ≥Èó≠ÂäüËÉΩ
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            closeImageViewer(modal);
        }
    });
    
    // Ê∑ªÂä†ÈîÆÁõòESCÂÖ≥Èó≠ÂäüËÉΩ
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
            closeImageViewer(modal);
        }
    });
    
    document.body.appendChild(modal);
    // Ëß¶ÂèëÈáçÊéí‰ª•ÂêØÂä®Âä®Áîª
    setTimeout(() => modal.classList.add('show'), 10);
}

// ÂÖ≥Èó≠ÂõæÁâáÊü•ÁúãÂô®
function closeImageViewer(element) {
    const modal = element.closest('.image-viewer-modal');
    modal.classList.remove('show');
    setTimeout(() => modal.remove(), 300);
}